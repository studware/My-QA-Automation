// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using IntegrationTests.Models;
//
//    var author = Author.FromJson(jsonString);

namespace IntegrationQA.Models
{
    using Newtonsoft.Json;

    public partial class Author
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("firstName")]
        public string FirstName { get; set; }

        [JsonProperty("lastName")]
        public string LastName { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("age")]
        public long Age { get; set; }

        [JsonProperty("genre")]
        public string Genre { get; set; }

        [JsonProperty("dateOfBirth")]
        public string DateOfBirth { get; set; }

        public static Author PostAuthor()
        {
            return new Author
            {
                FirstName = "Vladimir",
                LastName = "Zarev",
    //          DateOfBirth = "1947-03-04T00:00:00",
                Genre = "Thriller"
            };
        }

        public static Author PostSampleAuthor()
        {
            return new Author
            {
                FirstName = "Jens",
                LastName = "Lapidus",
    //          DateOfBirth = "1974-03-04T00:00:00",
                Genre = "Thriller"
            };
        }

        public static Author GetAuthor()
        {
            return new Author
            {
                Name = "Vladimir Zarev",
                Genre = "Thriller",
                Age = 72
            };
        }

        public static Author GetSampleAuthor()
        {
            return new Author
            {
                Id = "a1da1d8e-1988-4634-b538-a01709477b77",
                Name = "Jens Lapidus",
                Genre = "Thriller",
                Age = 45
            };
        }
    }

    public partial class Author
    {
        public static Author FromJson(string json) => JsonConvert.
            DeserializeObject<Author>(json, Extensions.Converter.Settings);
    }
}
